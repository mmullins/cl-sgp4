#-*- fill-column:99 -*-

#+STARTUP: showall

* CODE DESCRIPTION

The original FORTRAN program implementing the SGP4 satellite propagation model was first presented
publicly in Spacetrack Report #3 (see STR3 in the REFERENCES section below).  That code was revised
by Vallado (reference Vallado2006) and recoded into several other languages.

The code here is a completely new rewrite, based on the basic formulas describing the model
(reference Hoots2004).  It refers to the code of Vallado2006 and STR3 only to sort out some aspects
of the model not fully defined in Hoots2004, and also to see where that code deviates from
Hoots2004 in a few areas.  The "fixes" flagged with "sgp4fix" in Vallado's code are included here.

The code organization is very different from the previous programs referenced above.  It uses pure
functions, i.e., functions whose only effect is to return values that they create from their
inputs; they modify no state such as global variables or the fields of objects.  As far as
possible, the functions have inputs limited to the values they actually need rather then using
large COMMON blocks or equivalent for communication as the original STR3 code used.  Note, though,
that in some cases these inputs are vectors of related quantities; for example, the orbital
elements are usually all passed to a function in a 6-element vector even if it needs only a few of
them.  The only exception to the pure functional design is the integrator state used during
resonance calculations - that is altered in-place for some, probably slight, efficiency.

** Nomenclature

Names in the code follow the variable names in Hoots2004 whereever possible.  Greek letters are
sometimes written in full, sometimes abbreviated (as in =w= for \omega and =O= for \Omega in the
orbital elements).  Latin letters are capitalized or not, as they are in Hoots2004.  Suffixes are
generally appended as is; so, for example, Earth radius, a_E in TeX format, becomes =aE=.

Satellite orbital elements are kept in 6-vectors typically named =v-el=.  These vectors contain
[ =n= =e= =I= =O= =w= =M= ], where
- =n= = mean motion in radians/min
- =e= = eccentricity
- =I= = inclination, radians
- =O= = \Omega = right ascension of the ascending node, radians
- =w= = \omega = argument of perigee, radians
- =M= = mean anomaly at the epoch, radians

Hoots2004, App A uses "I" for inclination, while App B uses "i".  I have used "=I=" here since it
visually divides off from surrounding letters better in some cases.  Of course since this is Common
Lisp, which has an unusual treatment of case, this difference is only for human consumption of the
source code.

At the epoch time, elements are called =v-el0=.  At other times, they are called =v-el=.

From two-line-element data, =v-el= initially contains Kozai mean motion but that is converted to
Brouwer mean motion very early in processing.  These then become the \prime\prime (double prime)
values Hoots refers to in some places but I don't include any indication of "\prime\prime" in the
names.

Deltas of elements are =v-del= and derivatives of elements with respect to time are =v-deldt=.
Individual component derivatives are named, for example, =dndt= for first derivative of mean
motion, =n=, and =d2ndt2= for second derivative.

A value in units other than the canonical units of the SGP4 calculation (Earth radii and minutes)
is indicated by suffixing "=-<unit>=" to the name.  So Earth radius in km is =aE-km=, perigee in km
is =perigee-km=.

In a number of places I define values as powers of another value.  If the original value's name
ends in a letter, I usually just append an integer to make the name of the value to a power: =xxx=
squared is =xxx2=, cubed is =xxx3=, etc.  If the original value's name ends in a number, I append
"=to<integer>=" instead: =x123= squared is =x123to2=, cubed is =x123to3=, etc.

** Epoch Time

Epoch time, =t50=, is in days after Jan 0, 1950 = Julian date 2433281.5

** Units

The code uses Earth radii for length units and minutes for time units as in the original STR3
code.  Some more recent programs seem to use 1/ke = 13.446837399035523 minutes for the time unit.

* VALIDATION AGAINST A STANDARD PROGRAM

It is assumed that the goal should be to match the test cases presented in Vallado2006, rather than
necessarily following exactly the formulas in STR3 or Hoots2004.  Vallado2006's results have been
generated by an updated version of the STR3 program, and it is Vallado2006's FORTRAN program that
has been taken as the canonical program to which results here are to be matched.  This has mostly
been achieved.  Function =TEST-SGP4= of package "=TEST-CL-SGP4=" does a validation run, comparing
the output of this program for the test cases defined in file =test-data/SGP4-VER.TLE= to the
output from Vallado's FORTRAN program which is in file =test-data/tforver.out=.  Results are:

#+BEGIN_EXAMPLE
  num  period [min] D R T L # tried / # done / # comp      delta [m]     delta-v [m/s]
    5      133.0353             13 /     13 /     13        6.55d-6          4.98d-7
 4632     1197.6847 D   T L      5 /      5 /      5        1.49d-4          4.93d-7
 6251       92.5220             25 /     25 /     25        4.90d-6          4.90d-7
 8195      718.2354 D H T       25 /     25 /     25        1.43d-4          4.93d-7
 9880      717.0829 D H T       25 /     25 /     25        5.53d-5          4.97d-7
 9998     1239.3836 D S T L     14 /     14 /     14        5.38d-5          4.95d-7
11801      630.0926 D   T        5 /      5 /      5        4.12d-5          4.78d-7
14128     1456.4563 D S T L     25 /     25 /     25        1.56d-4          4.66d-7
16925      294.7728 D   T       13 /     13 /     13        8.23d-6          4.92d-7
20413     5832.3014 D   T L     26 /     26 /     26        6.07d-3 *        5.69d-7
21897      715.4569 D H T       25 /     25 /     25        1.61d-4          4.97d-7
22312       90.2400     T       23 /     23 /     23        5.12d-6          4.93d-7
22674      732.1545 D H T       25 /     25 /     25        1.09d-4          4.87d-7
23177      637.4314 D   T L     13 /     13 /     13        1.13d-4          4.92d-7
23333    19700.4142 D   T       15 /     15 /     15        9.35d-2 *        3.75d-5 *
23599      321.5746 D   T L     37 /     37 /     37        2.97d-5          4.89d-7
24208     1428.8825 D S T L     13 /     13 /     13        8.62d-5          4.88d-7
25954     1436.1040 D S T L     26 /     26 /     26        7.49d-5          4.95d-7
26900     1436.0674 D S T L      4 /      4 /      4        2.79d-4          4.09d-7
26975      700.1931 D H T       25 /     25 /     25        6.96d-5          5.04d-7
28057      100.3150             25 /     25 /     25        4.97d-6          4.89d-7
28129      717.9797 D   T       13 /     13 /     13        2.14d-5          4.66d-7
28350       87.3862     T       25 /     25 /     13        4.94d-6          4.85d-7
28623      379.4695 D   T       13 /     13 /     13        2.02d-5          4.91d-7
28626     1436.1199 D S T L     13 /     13 /     13        8.24d-5          4.85d-7
28872       87.4840     T       13 /     13 /     11        5.94d-6          4.91d-7
29141       90.3760             23 /     23 /     22        8.39d-6          4.89d-7
29238       91.4969     T       13 /     13 /     13        4.97d-6          4.72d-7
88888       89.6736     T       13 /     13 /     13        4.63d-6          4.83d-7
#+END_EXAMPLE

The column headed num contains the satellite number for the test case and the period column gives
its period in minutes.  The column headed D indicates a deep-space case; R, a resonance case (H for
half-day, S for synchronous); T, that terms are dropped in the drag calculation; and L, a Lyddane
case.  (Actually the Lyddane note here is based on the elements at epoch, while it is possible that
some satellite crosses the Lyddane boundary during the run. The code accounts for this, but the
table above might not.)

Columns headed # tried, # done, # comp indicate the number of times for which state was to be
determined based on the test parameters in Vallado's test cases, the number actually calculated,
and the number compared to the canonical program's results.  All are equal here, showing that all
the times specified have been checked.

The delta and delta-v columns are the maximum differences between the results of this program and
that of the canonical FORTRAN program of Vallado2006 for position and velocity in any coordinate
direction and any time for each satellite.

Most results have errors less than 1e-3 m, and show similar errors to those of the top panel of Fig
7 of Vallado2006.  1e-3 m is a fractional error on the order of 1e-10 for a typical case.  This is
probably beginning to be affected by double precision floating point truncation and mathematical
function error.  Cases with this magnitude difference are likely doing the same calculation as the
canonical program except for some changes in the order of arithmetic operations.

The worst case errors are marked with asterisks in the table above.  The worst case is satellite
number 23333, which is a very high eccentricity case.  The error for this case is high enough that
it probably indicates some slight difference in operation compared with the canonical program.  The
next worst is 20413.  These are the two highest period satellites, and the two most likely to be
affected by the long period solar and lunar periodic terms.  I believe this is where the difference
lies, but I have not been able to find it.

In practical terms, of course, errors of this magnitude are well below the knowledge of the state
and the errors in the propagation model for real satellites.  These are typically on the order of 1
km, far larger than the errors above.

* OPTIMIZATION

Type declarations are included in many places.  Checking 100 runs of the propagation calls of the
test cases (see =test-cl-sgp4.lisp=), time was reduced by about 15% by adding declarations on
double-float function parameters, and by a further 30% by adding declarations on double-float LET
and LOOP parameters.  Hence the declarations in the functions.

Other optimizations carried out to produce the version here from the more "elegant, functional,
higher-order function" version that I originally wrote involved
- replacing =(map 'vector ...)= and =(reduce ...)= with loop code (for ex, in constructing the =dOdt-LS=,
  etc, in =integrate-from-t50-synchronous-resonance=),
- avoiding concatenate in favour of explicitly constructing a vector and using loop, and
- using =(values ...)= instead of stashing multiple outputs into a vector and pulling them out
  again on the receiving end (for ex, integrator state for the resonance calculations).
- inlining a few functions
These changes gave a further 30% or 40% reduction in time.

I consider these reasonable.  Making these optimizations, including identifying bottlenecks with
the help of the SBCL profiler, took less than a day, far less than the time to code the thing in
the first place.  No doubt more could be done, but this seems to me to be a reasonable amount of
time to invest in optimization for such code.  These changes are also reasonable in that they have
left the code basically as readable and maintainable as was the first version.

* SPEED

100 runs of the propagation calls of the test cases (see =test-cl-sgp4.lisp=), i.e., 53300 calls to
propagate, took approximately 0.67 seconds on a 2 GHz laptop with 32-bit SBCL, 0.33 seconds on a
2.8 GHz desktop with 64-bit SBCL.  These are about 80000 and 160000 propagation calls per second,
respectively.  This appears to be about 4 times slower than Vallado's FORTRAN program when it is
compiled with maximum optimization.  No doubt some of the slowdown is due to the language, some to
the program organization.  Compared to the FORTRAN program, the organization here involves no
global shared data and almost entirely pure functional data handling.

Note that these timings are for a single thread/core doing all the work for both the Lisp and
FORTRAN program.  Most applications of such a code would probably be easily parallelized, though,
so total throughput could be improved using more cores.  This should be particularly true of the
version here because the organizational features described above typically make it easier to
parallelize computations.  The shared global data of the original SGP4 program and its derivatives
would probably complicate parallelization.

* REFERENCES

#+BEGIN_SRC tex
@INPROCEEDINGS { Vallado2006,
  AUTHOR= {David A. Vallado and Paul Crawford and Richard Hujsak and T. S. Kelso},
  TITLE= {Revisiting Spacetrack Report #3: Rev 1},
  BOOKTITLE= {AIAA/AAS Astrodynamics Specialist Conference and Exhibit},
  YEAR= {2006},
  NOTE= {AIAA 2006-6753-Rev1},
  URL= {http://celestrak.com/publications/AIAA/2006-6753/}
  }

@ARTICLE{ Hoots2004,
  AUTHOR= {Felix R. Hoots and Paul W. Schumacher Jr. and Robert A. Glover},
  TITLE= {History of Analytical Orbit Modeling in the U. S. Space Surveillance System},
  JOURNAL= {Journal of Guidance, Control, and Dynamics (AIAA)},
  YEAR= {2004},
  VOLUME= {27},
  NUMBER= {2},
  PAGES= {174-185}
  }

@TECHREPORT{ STR3,
  AUTHOR= {Felix R. Hoots and Ronald L. Roehrich},
  TITLE= {SPACETRACK REPORT NO. 3 Models for Propagation of NORAD Element Sets},
  INSTITUTION = {Project Spacetrack Reports Office of Astrodynamics Aerospace Defense Center},
  YEAR= {1980},
  NOTE= {Package compiled by T. S. Kelso, 31 Dec 1988},
  URL= {http://celestrak.com/NORAD/documentation/spacetrk.pdf}
  }
#+END_SRC

* TODO

The following would be nice, but not vital for most applications:
- sort out 23333 and 20413 errors (long period solar, lunar periodic terms?), and so get rid of
  some of the commented out debugging printout code
- deal with all the error conditions handled by the code of Vallado2006
- try a simple parallelization approach and see how things speed up
